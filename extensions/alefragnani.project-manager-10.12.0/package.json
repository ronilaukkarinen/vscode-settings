{
	"name": "project-manager",
	"displayName": "Project Manager",
	"description": "Easily switch between projects",
	"version": "10.12.0",
	"publisher": "alefragnani",
	"galleryBanner": {
		"color": "#000000",
		"theme": "dark"
	},
	"engines": {
		"vscode": "^1.42.0"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"git",
		"project",
		"folder",
		"workspace",
		"switch",
		"manage",
		"mercurial",
		"svn",
		"multi-root ready"
	],
	"extensionKind": [
		"ui",
		"workspace"
	],
	"icon": "images/icon.png",
	"license": "SEE LICENSE IN LICENSE.md",
	"homepage": "https://github.com/alefragnani/vscode-project-manager/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/alefragnani/vscode-project-manager.git"
	},
	"bugs": {
		"url": "https://github.com/alefragnani/vscode-project-manager/issues"
	},
	"activationEvents": [
		"*",
		"onCommand:projectManager.saveProject",
		"onCommand:projectManager.addToWorkspace#sideBar",
		"onCommand:projectManager.addToWorkspace",
		"onCommand:projectManager.listProjects",
		"onCommand:projectManager.listProjectsNewWindow",
		"onCommand:projectManager.editProjects",
		"onCommand:projectManager.refreshProjects",
		"onCommand:projectManager.refreshVSCodeProjects",
		"onCommand:projectManager.refreshGitProjects",
		"onCommand:projectManager.refreshSVNProjects",
		"onCommand:projectManager.refreshAnyProjects",
		"onCommand:projectManager.refreshMercurialProjects",
		"onView:projectsExplorer"
	],
	"main": "./dist/extension",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "project-manager",
					"title": "%projectManager.activitybar.title%",
					"icon": "images/project-manager-side-bar.svg"
				}
			]
		},
		"views": {
			"project-manager": [
				{
					"id": "projectsExplorerFavorites",
					"name": "Favorites"
				},
				{
					"id": "projectsExplorerGit",
					"name": "Git",
					"when": "projectManager.canShowTreeViewGit"
				},
				{
					"id": "projectsExplorerSVN",
					"name": "SVN",
					"when": "projectManager.canShowTreeViewSVN"
				},
				{
					"id": "projectsExplorerAny",
					"name": "Any",
					"when": "projectManager.canShowTreeViewAny"
				},
				{
					"id": "projectsExplorerMercurial",
					"name": "Mercurial",
					"when": "projectManager.canShowTreeViewMercurial"
				},
				{
					"id": "projectsExplorerVSCode",
					"name": "VSCode",
					"when": "projectManager.canShowTreeViewVSCode"
				}
			]
		},
		"commands": [
			{
				"command": "projectManager.saveProject",
				"title": "%projectManager.commands.saveProject.title%",
				"icon": "$(save)"
			},
			{
				"command": "projectManager.listProjects",
				"title": "%projectManager.commands.listProjects.title%"
			},
			{
				"command": "projectManager.listProjectsNewWindow",
				"title": "%projectManager.commands.listProjectsNewWindow.title%"
			},
			{
				"command": "projectManager.editProjects",
				"title": "%projectManager.commands.editProjects.title%",
				"icon": "$(edit)"
			},
			{
				"command": "projectManager.refreshProjects",
				"title": "%projectManager.commands.refreshProjects.title%"
			},
			{
				"command": "projectManager.refreshVSCodeProjects",
				"title": "%projectManager.commands.refreshVSCodeProjects.title%",
				"icon": "$(refresh)"
			},
			{
				"command": "projectManager.refreshGitProjects",
				"title": "%projectManager.commands.refreshGitProjects.title%",
				"icon": "$(refresh)"
			},
			{
				"command": "projectManager.refreshSVNProjects",
				"title": "%projectManager.commands.refreshSVNProjects.title%",
				"icon": "$(refresh)"
			},
			{
				"command": "projectManager.refreshAnyProjects",
				"title": "%projectManager.commands.refreshAnyProjects.title%",
				"icon": "$(refresh)"
			},
			{
				"command": "projectManager.refreshMercurialProjects",
				"title": "%projectManager.commands.refreshMercurialProjects.title%",
				"icon": "$(refresh)"
			},
			{
				"command": "projectManager.open",
				"title": "%projectManager.commands.open.title%"
			},
			{
				"command": "projectManager.openInNewWindow",
				"title": "%projectManager.commands.openInNewWindow.title%",
				"icon": "$(link-external)"
			},
			{
				"command": "projectManager.addToWorkspace#sideBar",
				"title": "%projectManager.commands.addToWorkspace#sideBar.title%"
			},
			{
				"command": "projectManager.addToWorkspace",
				"title": "%projectManager.commands.addToWorkspace.title%"
			},
			{
				"command": "projectManager.deleteProject",
				"title": "%projectManager.commands.deleteProject.title%"
			},
			{
				"command": "projectManager.renameProject",
				"title": "%projectManager.commands.renameProject.title%"
			},
			{
				"command": "projectManager.whatsNew",
				"title": "%projectManager.commands.whatsNew.title%"
			},
			{
				"command": "projectManager.whatsNewContextMenu",
				"title": "%projectManager.commands.whatsNewContextMenu.title%"
			},
			{
				"command": "projectManager.addToFavorites",
				"title": "%projectManager.commands.addToFavorites.title%"
			},
			{
				"command": "projectManager.toggleProjectEnabled",
				"title": "%projectManager.commands.toggleProjectEnabled.title%"
			},
			{
				"command": "projectManager.saveFirstProject",
				"title": "%projectManager.commands.saveFirstProject.title%"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "projectManager.open",
					"when": "false"
				},
				{
					"command": "projectManager.openInNewWindow",
					"when": "false"
				},
				{
					"command": "projectManager.addToWorkspace#sideBar",
					"when": "false"
				},
				{
					"command": "projectManager.deleteProject",
					"when": "false"
				},
				{
					"command": "projectManager.renameProject",
					"when": "false"
				},
				{
					"command": "projectManager.whatsNewContextMenu",
					"when": "false"
				}
			],
			"view/title": [
				{
					"command": "projectManager.saveProject",
					"when": "view == projectsExplorerFavorites",
					"group": "navigation@10"
				},
				{
					"command": "projectManager.editProjects",
					"when": "view == projectsExplorerFavorites",
					"group": "navigation@11"
				},
				{
					"command": "projectManager.refreshVSCodeProjects",
					"when": "view == projectsExplorerVSCode",
					"group": "navigation"
				},
				{
					"command": "projectManager.refreshGitProjects",
					"when": "view == projectsExplorerGit",
					"group": "navigation"
				},
				{
					"command": "projectManager.refreshSVNProjects",
					"when": "view == projectsExplorerSVN",
					"group": "navigation"
				},
				{
					"command": "projectManager.refreshAnyProjects",
					"when": "view == projectsExplorerAny",
					"group": "navigation"
				},
				{
					"command": "projectManager.refreshMercurialProjects",
					"when": "view == projectsExplorerMercurial",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "projectManager.open",
					"when": "view =~ /projectsExplorer(Favorites|VSCode|Git|SVN|Any|Mercurial)/ && viewItem == ProjectNodeKind",
					"group": "navigation"
				},
				{
					"command": "projectManager.openInNewWindow",
					"when": "view =~ /projectsExplorer(Favorites|VSCode|Git|SVN|Any|Mercurial)/ && viewItem == ProjectNodeKind",
					"group": "navigation"
				},
				{
					"command": "projectManager.openInNewWindow",
					"when": "view =~ /projectsExplorer(Favorites|VSCode|Git|SVN|Any|Mercurial)/ && viewItem == ProjectNodeKind",
					"group": "inline"
				},
				{
					"command": "projectManager.addToWorkspace#sideBar",
					"when": "view =~ /projectsExplorer(Favorites|VSCode|Git|SVN|Any|Mercurial)/ && viewItem == ProjectNodeKind",
					"group": "workspace"
				},
				{
					"command": "projectManager.addToFavorites",
					"when": "view =~ /projectsExplorer(VSCode|Git|SVN|Any|Mercurial)/ && viewItem == ProjectNodeKind",
					"group": "favorites"
				},
				{
					"command": "projectManager.deleteProject",
					"when": "view == projectsExplorerFavorites && viewItem == ProjectNodeKind",
					"group": "favorites"
				},
				{
					"command": "projectManager.renameProject",
					"when": "view == projectsExplorerFavorites && viewItem == ProjectNodeKind",
					"group": "favorites"
				},
				{
					"command": "projectManager.toggleProjectEnabled",
					"when": "view == projectsExplorerFavorites && viewItem == ProjectNodeKind",
					"group": "favorites"
				},
				{
					"command": "projectManager.saveFirstProject",
					"when": "view == projectsExplorerFavorites && viewItem == ConfigNodeKind",
					"group": "favorites"
				}
			],
			"extension/context": [
				{
					"command": "projectManager.whatsNewContextMenu",
					"group": "projectManager",
					"when": "extension == alefragnani.project-manager && extensionStatus == installed"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "%projectManager.configuration.title%",
			"properties": {
				"projectManager.showProjectNameInStatusBar": {
					"type": "boolean",
					"default": true,
					"description": "%projectManager.configuration.showProjectNameInStatusBar.description%"
				},
				"projectManager.openInNewWindowWhenClickingInStatusBar": {
					"type": "boolean",
					"default": false,
					"description": "%projectManager.configuration.openInNewWindowWhenClickingInStatusBar.description%"
				},
				"projectManager.removeCurrentProjectFromList": {
					"type": "boolean",
					"default": true,
					"description": "%projectManager.configuration.removeCurrentProjectFromList.description%"
				},
				"projectManager.sortList": {
					"type": "string",
					"default": "Name",
					"description": "%projectManager.configuration.sortList.description%",
					"enum": [
						"Saved",
						"Name",
						"Path",
						"Recent"
					]
				},
				"projectManager.groupList": {
					"type": "boolean",
					"default": false,
					"description": "%projectManager.configuration.groupList.description%"
				},
				"projectManager.projectsLocation": {
					"type": "string",
					"default": "",
					"description": "%projectManager.configuration.projectsLocation.description%"
				},
				"projectManager.vscode.baseFolders": {
					"type": "array",
					"default": [],
					"description": "%projectManager.configuration.vscode.baseFolders.description%"
				},
				"projectManager.vscode.ignoredFolders": {
					"type": "array",
					"default": [
						"node_modules",
						"out",
						"typings",
						"test"
					],
					"description": "%projectManager.configuration.vscode.ignoredFolders.description%"
				},
				"projectManager.vscode.maxDepthRecursion": {
					"type": "integer",
					"default": 4,
					"description": "%projectManager.configuration.vscode.maxDepthRecursion.description%"
				},
				"projectManager.git.baseFolders": {
					"type": "array",
					"default": [],
					"description": "%projectManager.configuration.git.baseFolders.description%"
				},
				"projectManager.git.ignoredFolders": {
					"type": "array",
					"default": [
						"node_modules",
						"out",
						"typings",
						"test",
						".haxelib"
					],
					"description": "%projectManager.configuration.git.ignoredFolders.description%"
				},
				"projectManager.git.maxDepthRecursion": {
					"type": "integer",
					"default": 4,
					"description": "%projectManager.configuration.git.maxDepthRecursion.description%"
				},
				"projectManager.hg.baseFolders": {
					"type": "array",
					"default": [],
					"description": "%projectManager.configuration.hg.baseFolders.description%"
				},
				"projectManager.hg.ignoredFolders": {
					"type": "array",
					"default": [
						"node_modules",
						"out",
						"typings",
						"test",
						".haxelib"
					],
					"description": "%projectManager.configuration.hg.ignoredFolders.description%"
				},
				"projectManager.hg.maxDepthRecursion": {
					"type": "integer",
					"default": 4,
					"description": "%projectManager.configuration.hg.maxDepthRecursion.description%"
				},
				"projectManager.svn.baseFolders": {
					"type": "array",
					"default": [],
					"description": "%projectManager.configuration.svn.baseFolders.description%"
				},
				"projectManager.svn.ignoredFolders": {
					"type": "array",
					"default": [
						"node_modules",
						"out",
						"typings",
						"test"
					],
					"description": "%projectManager.configuration.svn.ignoredFolders.description%"
				},
				"projectManager.svn.maxDepthRecursion": {
					"type": "integer",
					"default": 4,
					"description": "%projectManager.configuration.svn.maxDepthRecursion.description%"
				},
				"projectManager.any.baseFolders": {
					"type": "array",
					"default": [],
					"description": "%projectManager.configuration.any.baseFolders.description%"
				},
				"projectManager.any.ignoredFolders": {
					"type": "array",
					"default": [
						"node_modules",
						"out",
						"typings",
						"test"
					],
					"description": "%projectManager.configuration.any.ignoredFolders.description%"
				},
				"projectManager.any.maxDepthRecursion": {
					"type": "integer",
					"default": 4,
					"description": "%projectManager.configuration.any.maxDepthRecursion.description%"
				},
				"projectManager.cacheProjectsBetweenSessions": {
					"type": "boolean",
					"default": true,
					"description": "%projectManager.configuration.cacheProjectsBetweenSessions.description%"
				},
				"projectManager.checkInvalidPathsBeforeListing": {
					"type": "boolean",
					"default": true,
					"description": "%projectManager.configuration.checkInvalidPathsBeforeListing.description%"
				},
				"projectManager.filterOnFullPath": {
					"type": "boolean",
					"default": false,
					"description": "%projectManager.configuration.filterOnFullPath.description%"
				},
				"projectManager.openInCurrenWindowIfEmpty": {
					"type": "string",
					"default": "always",
					"enum": [
						"always",
						"onlyUsingCommandPalette",
						"onlyUsingSideBar",
						"never"
					],
					"enumDescriptions": [
						"Whenever you call the Open in New Window command, it will open in the current window, if empty",
						"Only open in the current window if you use the Command Palette",
						"Only open in the current window if you use the Side Bar",
						"Works as today. The Open in New Window command will always open in New Window"
					],
					"description": "%projectManager.configuration.openInCurrenWindowIfEmpty.description%"
				}
			}
		},
		"keybindings": [
			{
				"command": "projectManager.listProjects",
				"key": "shift+alt+p",
				"mac": "cmd+alt+p"
			}
		]
	},
	"scripts": {
		"build": "webpack --mode development",
		"watch": "webpack --watch --mode development --info-verbosity verbose",
		"vscode:prepublish": "webpack --mode production",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch",
		"compile": "tsc -watch -p ./"
	},
	"devDependencies": {
		"@types/node": "^10.14.17",
		"@types/vscode": "^1.42.0",
		"typescript": "^3.5.1",
		"vscode": "^1.1.36",
		"webpack": "^4.19.1",
		"webpack-cli": "^3.1.0",
		"ts-loader": "^4.4.2",
		"terser-webpack-plugin": "^1.2.1"
	},
	"dependencies": {
		"walker": "^1.0.7"
	},
	"__metadata": {
		"id": "1b747f06-3789-4ebd-ac99-f1fe430c3347",
		"publisherId": "3fbdef65-bdf5-4723-aeaf-9e12a50546ef",
		"publisherDisplayName": "Alessandro Fragnani"
	}
}