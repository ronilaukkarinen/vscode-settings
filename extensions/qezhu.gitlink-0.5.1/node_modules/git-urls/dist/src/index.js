"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const hostBuilder_1 = require("./host/hostBuilder");
const helper_1 = require("./helper");
class GitUrls {
    static getUrlsAsync(filePath, section) {
        return __awaiter(this, void 0, void 0, function* () {
            const repoRoot = helper_1.default.getRepoRoot(filePath);
            if (!repoRoot) {
                throw new Error(`Can't find repo root for ${filePath}.`);
            }
            const configMap = yield helper_1.default.parseConfigAsync(repoRoot);
            let urlsMap = new Map();
            for (let [key, configInfo] of configMap) {
                configInfo.relativePath = helper_1.default.normarlize(path.relative(repoRoot, filePath));
                if (section) {
                    configInfo.section = section;
                }
                const url = yield this.getUrlAsync(configInfo);
                urlsMap.set(key, url);
            }
            return urlsMap;
        });
    }
    static getUrlAsync(configInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const host = hostBuilder_1.default.create(configInfo);
            let gitInfo = host.parse(configInfo);
            if (configInfo.section) {
                gitInfo.section = configInfo.section;
            }
            if (configInfo.relativePath) {
                let parts = configInfo.relativePath.split('/');
                parts = parts.map(p => encodeURIComponent(p));
                gitInfo.relativefilePath = parts.join('/');
            }
            if (configInfo.branchName) {
                gitInfo.branchName = encodeURIComponent(configInfo.branchName);
            }
            return host.assemble(gitInfo);
        });
    }
}
exports.default = GitUrls;
//# sourceMappingURL=index.js.map