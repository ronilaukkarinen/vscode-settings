From a96466026a9dce382b95bf7d86fca65718627920 Mon Sep 17 00:00:00 2001
From: Darren Prentice <prenticedarren@gmail.com>
Date: Wed, 8 Jan 2020 11:49:14 -0500
Subject: [PATCH] Add titleBar 'frameless' option

---
 README.md                         |   9 +-
 modules/title-bar-main-process.js |  35 +++++--
 modules/title-bar.js              | 150 ++++++++++++++++--------------
 package.json                      |   3 +-
 4 files changed, 116 insertions(+), 81 deletions(-)

diff --git a/README.md b/README.md
index 208e2ad..d49fe86 100644
--- a/README.md
+++ b/README.md
@@ -21,7 +21,14 @@ When set to `wide`, activity bar will match the width of traffic lights (for mac
 
 ### `customizeUI.titleBar`
 
-macOS only. When set to `inline`, titlebar is hidden and window controls become part of sidebar. Note that this setting requires that `"window.titleBarStyle": "native"` is also set.
+macOS only. Setting this hides the titlebar, and the tab bar becomes draggable.
+
+* `inline`: places window controls in the sidebar or tab bar. 
+
+* `frameless`: hides window controls. 
+
+Note that this setting requires that `"window.titleBarStyle": "native"` is also set.
+
 
 ### `customizeUI.fontSizeMap`
 
diff --git a/modules/title-bar-main-process.js b/modules/title-bar-main-process.js
index 30c4c68..acb750f 100644
--- a/modules/title-bar-main-process.js
+++ b/modules/title-bar-main-process.js
@@ -12,24 +12,39 @@ define([
 
     let MainProcessTitleBar = class MainProcessTitleBar {
         constructor(configurationService) {
-            if (configurationService.getValue("customizeUI.titleBar") === "inline") {
-                this.init();
+            const titleBar = configurationService.getValue("customizeUI.titleBar");
+
+            if (titleBar === "inline" || titleBar === "frameless") {
+                this.init(titleBar);
             }
         }
 
-        init() {
+        init(titleBar) {
 
             this.swizzle();
 
             class _CodeWindow extends win.CodeWindow {
                 constructor() {
-                    Object.defineProperty(Object.prototype, "titleBarStyle", {
-                        get() { return "hidden"; },
-                        set() { },
-                        configurable: true,
-                    });
-                    super(...arguments);
-                    delete Object.prototype.titleBarStyle;
+                    // https://electronjs.org/docs/api/frameless-window
+                    //
+                    if (titleBar === "frameless") {
+                        Object.defineProperty(Object.prototype, "frame", {
+                            get() { return false; },
+                            set() { },
+                            configurable: true,
+                        });
+                        super(...arguments);
+                        delete Object.prototype.frame;
+
+                    } else {
+                        Object.defineProperty(Object.prototype, "titleBarStyle", {
+                            get() { return "hidden"; },
+                            set() { },
+                            configurable: true,
+                        });
+                        super(...arguments);
+                        delete Object.prototype.titleBarStyle;
+                    }
                 }
             }
 
diff --git a/modules/title-bar.js b/modules/title-bar.js
index c340aa2..f87ddb2 100644
--- a/modules/title-bar.js
+++ b/modules/title-bar.js
@@ -22,9 +22,12 @@ define([
                 this.configurationService = configurationService;
                 this.windowService = windowService;
 
-                if (platform.isMacintosh &&
-                    this.configurationService.getValue("customizeUI.titleBar") === "inline") {
-                    this.init();
+                if (platform.isMacintosh) {
+                    const titleBar = configurationService.getValue("customizeUI.titleBar");
+                    
+                    if (titleBar === "inline" || titleBar === "frameless") {
+                        this.init(titleBar === "inline");
+                    }
                 }
             }
 
@@ -78,7 +81,7 @@ define([
                 return this.activityBarIsWide() ? this.traffictLightDimensions().width : 50;
             }
 
-            init() {
+            init(titleBarIsInline) {
 
                 document.body.classList.add("inline-title-bar");
 
@@ -97,30 +100,32 @@ define([
                         args[1] -= self.traffictLightDimensions().height;
                     original();
                 });
+                
+                if (titleBarIsInline) {
+                    // add placeholder so that we can change color of activity bar behind traffic lights
+                    utils.override(activitybarPart.ActivitybarPart, "createContentArea", function (original, args) {
+                        let res = original();
 
-                // add placeholder so that we can change color of activity bar behind traffic lights
-                utils.override(activitybarPart.ActivitybarPart, "createContentArea", function (original, args) {
-                    let res = original();
-
-                    let parent = args[0];
-                    this._placeholder = document.createElement('div');
-                    this._placeholder.classList.add("activity-bar-placeholder");
+                        let parent = args[0];
+                        this._placeholder = document.createElement('div');
+                        this._placeholder.classList.add("activity-bar-placeholder");
 
-                    if (!self.activityBarIsWide()) {
-                        parent.appendChild(this._placeholder);
-                    }
+                        if (!self.activityBarIsWide()) {
+                            parent.appendChild(this._placeholder);
+                        }
 
-                    return res;
-                });
+                        return res;
+                    });
 
-                let color = colorRegistry.registerColor("inlineTitleBar.background");
+                    let color = colorRegistry.registerColor("inlineTitleBar.background");
 
-                // actually change the color
-                utils.override(activitybarPart.ActivitybarPart, "updateStyles", function (original) {
-                    original();
-                    let color = this.getColor("inlineTitleBar.background") || this.getColor("sideBar.background");
-                    this._placeholder.style.backgroundColor = color;
-                });
+                    // actually change the color
+                    utils.override(activitybarPart.ActivitybarPart, "updateStyles", function (original) {
+                        original();
+                        let color = this.getColor("inlineTitleBar.background") || this.getColor("sideBar.background");
+                        this._placeholder.style.backgroundColor = color;
+                    });
+                }
 
                 utils.override(part.Part, "layoutContents", function (original) {
                     // we need to override height for composite title, but only when laying
@@ -171,23 +176,26 @@ define([
                     self.update();
                 });
 
-                // Pad title to account for traffic lights
-                utils.override(compositePart.CompositePart, "updateStyles", function (original) {
-                    original();
-                    if (this._titleArea) {
-                        let color = this.getColor("inlineTitleBar.background");
-                        this._titleArea.style.backgroundColor = color;
-                        let padding = 0;
-                        if (self.isFullScreen() || self.layout.getSideBarPosition() == 1) {
-                            padding = 8; // default
-                        } else if (self.activityBarIsVisible()) {
-                            padding = Math.max(self.traffictLightDimensions().width - self.activityBarWidth() - 14, 0);
-                        } else {
-                            padding = self.traffictLightDimensions().width - 14;
+                if (titleBarIsInline) {
+                    // Pad title to account for traffic lights
+                    utils.override(compositePart.CompositePart, "updateStyles", function (original) {
+                        original();
+                        if (this._titleArea) {
+                            let color = this.getColor("inlineTitleBar.background");
+                            this._titleArea.style.backgroundColor = color;
+                            let padding = 0;
+                            if (self.isFullScreen() || self.layout.getSideBarPosition() == 1) {
+                                padding = 8; // default
+                            } else if (self.activityBarIsVisible()) {
+                                padding = Math.max(self.traffictLightDimensions().width - self.activityBarWidth() - 14, 0);
+                            } else {
+                                padding = self.traffictLightDimensions().width - 14;
+                            }
+                            this._titleArea.style.paddingLeft = `${padding}px`;
                         }
-                        this._titleArea.style.paddingLeft = `${padding}px`;
-                    }
-                });
+                    });
+                }
+
 
                 // Dragging in empty space after tabs
                 let replacement = function (original) {
@@ -245,36 +253,38 @@ define([
                 utils.override(ttt.TabsTitleControl, "openEditor", replacement);
                 utils.override(ttt.TabsTitleControl, "handleClosedEditors", replacement);
 
-                // left padding when sidebar is disabled
-                utils.override(ttt.TabsTitleControl, "create", function (original) {
-                    original();
+                if (titleBarIsInline) {
+                    // left padding when sidebar is disabled
+                    utils.override(ttt.TabsTitleControl, "create", function (original) {
+                        original();
 
-                    let tabsAndActions = this.titleContainer.childNodes[0];
-                    let leftPadding = document.createElement("div");
-                    leftPadding.classList.add("dragging-area-left-padding");
-                    tabsAndActions.insertBefore(leftPadding, tabsAndActions.childNodes[0]);
-
-                    // Set padding for first tab
-                    if (!self._paddingUpdated) {
-                        self.updateTabsLeftPadding(leftPadding, 0);
-                        self._paddingUpdated = true;
-                    }
-                });
+                        let tabsAndActions = this.titleContainer.childNodes[0];
+                        let leftPadding = document.createElement("div");
+                        leftPadding.classList.add("dragging-area-left-padding");
+                        tabsAndActions.insertBefore(leftPadding, tabsAndActions.childNodes[0]);
 
-                utils.override(titleControl.NoTabsTitleControl, "create", function(original) {
-                    original();
-                    let tabsAndActions = this.titleContainer.childNodes[0];
-                    let leftPadding = document.createElement("div");
-                    leftPadding.classList.add("dragging-area-left-padding");
-                    tabsAndActions.insertBefore(leftPadding, tabsAndActions.childNodes[0]);
-                    tabsAndActions.classList.add("no-tabs");
-
-                    // Set padding for first tab
-                    if (!self._paddingUpdatedNoTabs) {
-                        self.updateTabsLeftPadding(leftPadding, 0);
-                        self._paddingUpdatedNoTabs = true;
-                    }
-                });
+                        // Set padding for first tab
+                        if (!self._paddingUpdated) {
+                            self.updateTabsLeftPadding(leftPadding, 0);
+                            self._paddingUpdated = true;
+                        }
+                    });
+
+                    utils.override(titleControl.NoTabsTitleControl, "create", function(original) {
+                        original();
+                        let tabsAndActions = this.titleContainer.childNodes[0];
+                        let leftPadding = document.createElement("div");
+                        leftPadding.classList.add("dragging-area-left-padding");
+                        tabsAndActions.insertBefore(leftPadding, tabsAndActions.childNodes[0]);
+                        tabsAndActions.classList.add("no-tabs");
+
+                        // Set padding for first tab
+                        if (!self._paddingUpdatedNoTabs) {
+                            self.updateTabsLeftPadding(leftPadding, 0);
+                            self._paddingUpdatedNoTabs = true;
+                        }
+                    });
+                }
             }
 
             updateTabsLeftPadding(node, index) {
@@ -303,8 +313,10 @@ define([
                     }
 
                     let padding = document.getElementsByClassName("dragging-area-left-padding");
-                    for (let i = 0; i < padding.length; ++i) {
-                        this.updateTabsLeftPadding(padding[i], i);
+                    if (padding) {
+                        for (let i = 0; i < padding.length; ++i) {
+                            this.updateTabsLeftPadding(padding[i], i);
+                        }
                     }
                 }
             }
diff --git a/package.json b/package.json
index befe05b..1a7e4ef 100644
--- a/package.json
+++ b/package.json
@@ -56,7 +56,8 @@
 					"description": "Inline title bar style for macOS",
 					"enum": [
 						"regular",
-						"inline"
+						"inline",
+            "frameless"
 					]
 				},
 				"customizeUI.stylesheet": {
