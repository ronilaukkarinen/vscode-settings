"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../lib/util");
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const models_1 = require("../../lib/models");
const controller_1 = require("../../lib/controller");
const musicUtil = new util_1.MusicUtil();
const musicCtr = controller_1.MusicController.getInstance();
/**
 * Don't add "async" into the it condition.
 * i.e. it("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("itunes state tests", () => {
    before(done => {
        musicCtr
            .quitApp(CodyMusic.PlayerName.SpotifyDesktop)
            .then((result) => {
            musicCtr
                .quitApp(CodyMusic.PlayerName.ItunesDesktop)
                .then((result) => {
                done();
            });
        });
    });
    after("itunes player test completion", done => {
        CodyMusic.quitMacPlayer(CodyMusic.PlayerName.SpotifyDesktop).then((result) => {
            CodyMusic.quitMacPlayer(CodyMusic.PlayerName.ItunesDesktop).then((result) => {
                done();
            });
        });
    });
    it("Return itunes current track when itunes is the only app running", done => {
        CodyMusic.launchPlayer(CodyMusic.PlayerName.ItunesDesktop, {}).then(result => {
            musicUtil.sleep(2500);
            CodyMusic.getRunningTrack().then(async (track) => {
                let playerRunning = await CodyMusic.isPlayerRunning(models_1.PlayerName.ItunesDesktop);
                expect(playerRunning).to.equal(true);
                done();
            });
        });
    });
    it("Return itunes is not currently running", done => {
        musicCtr
            .quitApp(CodyMusic.PlayerName.ItunesDesktop)
            .then(async (result) => {
            let playerRunning = await CodyMusic.isPlayerRunning(models_1.PlayerName.ItunesDesktop);
            console.log("player running: ", playerRunning);
            expect(playerRunning).to.equal(false);
            done();
        });
    });
});
