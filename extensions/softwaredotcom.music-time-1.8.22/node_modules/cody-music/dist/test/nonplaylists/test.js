"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const util_1 = require("../util");
const models_1 = require("../../lib/models");
const util_2 = require("../../lib/util");
const musicUtil = new util_2.MusicUtil();
const testUtil = new util_1.TestUtil();
/**
 * Don't add "async" into the it condition.
 * i.e. xit("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("spotify nonplaylist tests", () => {
    before(done => {
        let configFile = __dirname + "/../config.json";
        let data = testUtil.getJsonFromFile(configFile);
        CodyMusic.setCredentials({
            refreshToken: data.refreshToken,
            clientSecret: data.clientSecret,
            clientId: data.clientId,
            accessToken: data.accessToken
        });
        done();
    });
    after("clean up spotify nonplaylist testing", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            if (response && response.length > 0) {
                // get the 1st device id
                const device_id = response[0].id;
                const options = {
                    device_id
                };
                response = await CodyMusic.pause(CodyMusic.PlayerName.SpotifyWeb, options);
                done();
            }
            else {
                done();
            }
        });
    });
    it("return songs not in a playlist", done => {
        CodyMusic.getSpotifyDevices().then(devices => {
            CodyMusic.getSavedTracks(models_1.PlayerName.SpotifyWeb, { limit: 50 })
                .then(result => {
                expect(result.length).to.not.equal(0);
                if (devices && devices.length > 0) {
                    const track = result[0];
                    const track_id = track.uri;
                    const device = devices[0];
                    const options = {
                        device_id: device.id,
                        track_ids: [track_id]
                    };
                    // play this track
                    CodyMusic.play(CodyMusic.PlayerName.SpotifyWeb, options).then(result => {
                        musicUtil.sleep(3000);
                        expect(result.status).to.equal(204);
                        done();
                    });
                }
                else {
                    done();
                }
            })
                .catch(err => {
                console.log("error getting saved tracks: ", err.message);
            });
        });
    });
    xit("return the tracks of a playlist", done => {
        CodyMusic.getPlaylists(models_1.PlayerName.SpotifyWeb).then(result => {
            let playlist_id = result[0].id;
            CodyMusic.getPlaylistTracks(models_1.PlayerName.SpotifyWeb, playlist_id).then(async (result) => {
                expect(result.data.items.length).to.not.equal(0);
                done();
            });
        });
    });
    it("return a spotify track by id", async () => {
        let track = await CodyMusic.getSpotifyTrackById("4iVVU8DyQvOVsKafv3KWIF", true, true, false);
        expect(track.uri).to.equal("spotify:track:4iVVU8DyQvOVsKafv3KWIF");
        track = await CodyMusic.getSpotifyTrackById("4iVVU8DyQvOVsKafv3KWIF", true, true, true);
        // console.log("track: ", JSON.stringify(track, null, 2));
        expect(track.uri).to.equal("spotify:track:4iVVU8DyQvOVsKafv3KWIF");
    });
});
