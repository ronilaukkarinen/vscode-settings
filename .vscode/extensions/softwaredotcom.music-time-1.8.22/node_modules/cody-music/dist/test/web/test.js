"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../lib/util");
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const models_1 = require("../../lib/models");
const controller_1 = require("../../lib/controller");
const util_2 = require("../util");
const musicUtil = new util_1.MusicUtil();
const musicCtr = controller_1.MusicController.getInstance();
const testUtil = new util_2.TestUtil();
/**
 * Don't add "async" into the it condition.
 * i.e. it("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("web player music tests", () => {
    before(done => {
        musicCtr
            .quitApp(CodyMusic.PlayerName.SpotifyDesktop)
            .then((result) => {
            let configFile = __dirname + "/../config.json";
            let data = testUtil.getJsonFromFile(configFile);
            CodyMusic.setCredentials({
                refreshToken: data.refreshToken,
                clientSecret: data.clientSecret,
                clientId: data.clientId,
                accessToken: data.accessToken
            });
            let setAccessToken = CodyMusic.getAccessToken();
            expect(setAccessToken).to.equal(data.accessToken);
            done();
        });
    });
    after("web play music test completion", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            if (response && response.length > 0) {
                // get the 1st device id
                const device_id = response[0].id;
                const options = {
                    device_id
                };
                response = await CodyMusic.pause(CodyMusic.PlayerName.SpotifyWeb, options);
                done();
            }
            else {
                done();
            }
        });
    });
    xit("Launch and test track state", done => {
        CodyMusic.launchPlayer(CodyMusic.PlayerName.SpotifyWeb, {}).then(result => {
            musicUtil.sleep(2500);
            CodyMusic.getRunningTrack().then((track) => {
                expect(track.id).to.equal("");
                done();
            });
        });
    });
    it("Check the spotify web player devices", done => {
        /**
         * [ { id: '116ab2c405ba92f106f4d10d45bb42cba89ec9e2',
            is_active: false,
            is_private_session: false,
            is_restricted: false,
            name: 'Web Player (Chrome)',
            type: 'Computer',
            volume_percent: 100 } ]
         */
        CodyMusic.getSpotifyDevices().then((response) => {
            // it shouldn't have any playing devices yet
            expect(response.length).to.equal(0);
            done();
        });
    });
    it("Launch and play web player", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            let hasComputerDevice = false;
            if (response) {
                for (let i = 0; i < response.length; i++) {
                    let element = response[i];
                    if (element.type === "Computer") {
                        hasComputerDevice = true;
                        break;
                    }
                }
            }
            if (!hasComputerDevice) {
                // launch the web player
                // High on Life
                const album_id = "1GUfof1gHsqYjoHFym3aim";
                await CodyMusic.launchPlayer(CodyMusic.PlayerName.SpotifyWeb, {
                    album_id
                });
                musicUtil.sleep(5000);
            }
            done();
        });
    });
    it("Check the spotify web player devices", done => {
        /**
         * [ { id: '116ab2c405ba92f106f4d10d45bb42cba89ec9e2',
            is_active: false,
            is_private_session: false,
            is_restricted: false,
            name: 'Web Player (Chrome)',
            type: 'Computer',
            volume_percent: 100 } ]
         */
        CodyMusic.getSpotifyDevices().then((response) => {
            expect(response.length).to.not.equal(0);
            done();
        });
    });
    it("Play on spotify device", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            // get the 1st device id
            const device_id = response[0].id;
            musicUtil.sleep(1000);
            response = await CodyMusic.playSpotifyDevice(device_id);
            expect(response.status).to.equal(204);
            done();
        });
    });
    it("Pause web player", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            // get the 1st device id
            const device_id = response[0].id;
            musicUtil.sleep(1000);
            const options = {
                device_id
            };
            response = await CodyMusic.pause(CodyMusic.PlayerName.SpotifyWeb, options);
            expect(response.status).to.equal(204);
            done();
        });
    });
    it("Play specific track and validate track is playing", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            // get the 1st device id
            const device_id = response[0].id;
            musicUtil.sleep(1000);
            // https://open.spotify.com/track/0i0wnv9UoFdZ5MfuFGQzMy
            // name: 'Last Hurrah'
            // id: spotify:track:0i0wnv9UoFdZ5MfuFGQzMy
            const track_id = "spotify:track:0i0wnv9UoFdZ5MfuFGQzMy";
            const options = {
                device_id,
                track_ids: [track_id]
            };
            response = await CodyMusic.play(CodyMusic.PlayerName.SpotifyWeb, options);
            musicUtil.sleep(3000);
            expect(response.status).to.equal(204);
            CodyMusic.getState(CodyMusic.PlayerName.SpotifyWeb).then((response) => {
                expect(response.state).to.equal(models_1.TrackStatus.Playing);
                expect(response.uri).to.equal(track_id);
                done();
            });
        });
    });
    it("Go to the next and previous track", done => {
        CodyMusic.getSpotifyDevices().then(async (response) => {
            // get the 1st device id
            const device_id = response[0].id;
            musicUtil.sleep(1000);
            let options = {
                device_id,
                track_ids: [
                    "spotify:track:4ut5G4rgB1ClpMTMfjoIuy",
                    "spotify:track:0i0wnv9UoFdZ5MfuFGQzMy"
                ]
            };
            response = await CodyMusic.play(CodyMusic.PlayerName.SpotifyWeb, options);
            musicUtil.sleep(3000);
            delete options["track_ids"];
            response = await CodyMusic.next(CodyMusic.PlayerName.SpotifyWeb, options);
            musicUtil.sleep(1000);
            response = await CodyMusic.next(CodyMusic.PlayerName.SpotifyWeb, options);
            musicUtil.sleep(1000);
            done();
        });
    });
});
