"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const util_1 = require("../../lib/util");
const controller_1 = require("../../lib/controller");
const models_1 = require("../../lib/models");
const musicUtil = new util_1.MusicUtil();
const musicCtr = controller_1.MusicController.getInstance();
/**
 * Don't add "async" into the it condition.
 * i.e. it("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("player control tests", () => {
    beforeEach(done => {
        musicCtr
            .quitApp(CodyMusic.PlayerName.SpotifyDesktop)
            .then((result) => {
            musicCtr
                .quitApp(CodyMusic.PlayerName.ItunesDesktop)
                .then((result) => {
                done();
            })
                .catch((err) => {
                done();
            });
        })
            .catch((err) => {
            musicCtr
                .quitApp(CodyMusic.PlayerName.ItunesDesktop)
                .then((result) => {
                done();
            })
                .catch((err) => {
                done();
            });
        });
    });
    after(done => {
        // make sure both players have been killed
        musicCtr
            .quitApp(CodyMusic.PlayerName.SpotifyDesktop)
            .then((result) => {
            musicCtr
                .quitApp(CodyMusic.PlayerName.ItunesDesktop)
                .then((result) => {
                done();
            })
                .catch((err) => {
                done();
            });
        })
            .catch((err) => {
            musicCtr
                .quitApp(CodyMusic.PlayerName.ItunesDesktop)
                .then((result) => {
                done();
            })
                .catch((err) => {
                done();
            });
        });
    });
    it("Play and Pause itunes", done => {
        musicCtr
            .launchApp(CodyMusic.PlayerName.ItunesDesktop)
            .then(async () => {
            await CodyMusic.setRepeat(CodyMusic.PlayerName.ItunesDesktop, false);
            musicUtil.sleep(1500);
            // iniate play
            await CodyMusic.play(CodyMusic.PlayerName.ItunesDesktop);
            musicUtil.sleep(1500);
            // check
            let result = await CodyMusic.getState(CodyMusic.PlayerName.ItunesDesktop);
            let songName = result.name;
            // go to the next track
            await CodyMusic.next(CodyMusic.PlayerName.ItunesDesktop);
            musicUtil.sleep(1500);
            // check the current song
            result = await CodyMusic.getState(CodyMusic.PlayerName.ItunesDesktop);
            expect(result.name).to.not.equal(songName);
            songName = result.name;
            // pause it
            await CodyMusic.pause(CodyMusic.PlayerName.ItunesDesktop);
            musicUtil.sleep(1500);
            result = await CodyMusic.getState(CodyMusic.PlayerName.ItunesDesktop);
            expect(result.name).to.equal(songName);
            expect(result.state).to.equal(models_1.TrackStatus.Paused);
            // play again and make sure the song name is still the same
            await CodyMusic.play(CodyMusic.PlayerName.ItunesDesktop);
            musicUtil.sleep(1500);
            result = await CodyMusic.getState(CodyMusic.PlayerName.ItunesDesktop);
            expect(result.name).to.equal(songName);
            expect(result.state).to.equal(models_1.TrackStatus.Playing);
            done();
        });
    });
});
