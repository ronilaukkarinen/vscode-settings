"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../lib/util");
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const models_1 = require("../../lib/models");
const controller_1 = require("../../lib/controller");
const musicUtil = new util_1.MusicUtil();
const musicCtr = controller_1.MusicController.getInstance();
/**
 * Don't add "async" into the it condition.
 * i.e. it("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("itunes player tests", () => {
    before((done) => {
        musicCtr.quitApp(CodyMusic.PlayerName.SpotifyDesktop).then((result) => {
            musicCtr.quitApp(CodyMusic.PlayerName.ItunesDesktop).then((result) => {
                done();
            });
        });
    });
    after("itunes player test completion", (done) => {
        musicCtr.quitApp(CodyMusic.PlayerName.SpotifyDesktop).then((result) => {
            musicCtr.quitApp(CodyMusic.PlayerName.ItunesDesktop).then((result) => {
                done();
            });
        });
    });
    it("Launch test", (done) => {
        CodyMusic.launchPlayer(CodyMusic.PlayerName.ItunesDesktop, {}).then((result) => {
            musicUtil.sleep(3000);
            done();
        });
    });
    xit("Get running track state", (done) => {
        CodyMusic.getRunningTrack().then((track) => {
            expect(track.id).to.not.equal("");
            done();
        });
    });
    xit("Get running track with only iTunes running", (done) => {
        CodyMusic.play(CodyMusic.PlayerName.ItunesDesktop).then((result) => {
            musicUtil.sleep(3000);
            CodyMusic.getRunningTrack().then((track) => {
                expect(track.id).to.not.equal("");
                done();
            });
        });
    });
    xit("Get itunes playlists", (done) => {
        CodyMusic.getPlaylists(models_1.PlayerName.ItunesDesktop).then((result) => {
            expect(result.length).to.not.equal(0);
            const playlistItem = result[0];
            expect(playlistItem.tracks.total).to.not.equal(0);
            done();
        });
    });
    xit("Get itunes playlists tracks", (done) => {
        CodyMusic.getPlaylists(models_1.PlayerName.ItunesDesktop).then((result) => {
            expect(result.length).to.not.equal(0);
            const playlistItem = result[0];
            CodyMusic.getPlaylistTracks(models_1.PlayerName.ItunesDesktop, playlistItem.id).then((result) => {
                let pageItem = result.data;
                expect(pageItem.items.length).to.not.equal(0);
                done();
            });
        });
    });
    it("Play track in context", (done) => {
        CodyMusic.getPlaylists(models_1.PlayerName.ItunesDesktop).then((result) => {
            const playlistItem = result[0];
            const playlistName = playlistItem.name;
            CodyMusic.getPlaylistTracks(models_1.PlayerName.ItunesDesktop, playlistItem.id).then((result) => {
                let pageItem = result.data;
                let track = pageItem.items[0];
                const trackName = track.name;
                CodyMusic.playTrackInContext(models_1.PlayerName.ItunesDesktop, [
                    trackName,
                    playlistName,
                ]).then((result) => {
                    CodyMusic.getRunningTrack().then((result) => {
                        expect(result.name).to.equal(trackName);
                        done();
                    });
                });
            });
        });
    });
    xit("Play song in library", (done) => {
        CodyMusic.getPlaylists(models_1.PlayerName.ItunesDesktop).then((result) => {
            const playlistItem = result[0];
            const playlistName = playlistItem.name;
            CodyMusic.getPlaylistTracks(models_1.PlayerName.ItunesDesktop, playlistItem.id).then((result) => {
                let pageItem = result.data;
                let track = pageItem.items[0];
                const trackName = track.name;
                CodyMusic.playTrackInLibrary(models_1.PlayerName.ItunesDesktop, [
                    trackName,
                    playlistName,
                ]).then((result) => {
                    CodyMusic.getRunningTrack().then((result) => {
                        expect(result.name).to.equal(trackName);
                        done();
                    });
                });
            });
        });
    });
    it("Play track number in playlist", (done) => {
        CodyMusic.playItunesTrackNumberInPlaylist("MostRecents", 7).then((result) => {
            console.log("result: ", result);
            done();
        });
    });
});
