"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("./decorators");
exports.Delete = decorators_1.Delete;
exports.FormData = decorators_1.FormData;
exports.FormEncoding = decorators_1.FormEncoding;
exports.Get = decorators_1.Get;
exports.Headers = decorators_1.Headers;
exports.Patch = decorators_1.Patch;
exports.Post = decorators_1.Post;
exports.Put = decorators_1.Put;
function createUrl(url, args) {
    var i = 0;
    return [url
            .split('/')
            .map(function (part) { return (part.startsWith(':') || part.startsWith('{')) && i <= args.length ? args[i++] : part; })
            .join('/'), args.length === 0 ? -1 : i];
}
function createQuery(parameters) {
    return Object.keys(parameters)
        .reduce(function (query, name) {
        return query + "&" + encodeURIComponent(name) + "=" + encodeURIComponent(parameters[name]);
    }, '')
        .replace(/^&/, '?');
}
function filterFormData(args, parameters) {
    return args.filter(function (_, index) {
        return !parameters || parameters.every(function (param) { return param.parameter !== index; });
    });
}
function buildUrl(tmpl, args, appendQuery) {
    var _a = createUrl(tmpl, args), url = _a[0], queryOrBodyIndex = _a[1];
    var query = createQuery(appendQuery && queryOrBodyIndex > -1 ? args[queryOrBodyIndex] : {});
    return ["" + url + query, queryOrBodyIndex];
}
function prepareHeaders(instance) {
    var headers = new Headers();
    var perRequest = instance.__Pretend__.perRequest;
    if (perRequest && perRequest.headers) {
        Object.keys(perRequest.headers).forEach(function (name) {
            perRequest.headers[name].forEach(function (value) {
                headers.append(name, value);
            });
        });
    }
    return headers;
}
function chainFactory(interceptors, i) {
    if (i === void 0) { i = 0; }
    return function chainStep(request) {
        return interceptors[i](chainFactory(interceptors, i + 1), request);
    };
}
function execute(instance, method, tmpl, args, sendBody, appendQuery, parameters) {
    var createBody = function () {
        if (parameters) {
            if (parameters.some(function (parameter) { return parameter.type === 'FormData'; })) {
                var formData_1 = new FormData();
                parameters.forEach(function (parameter) {
                    var value = args[parameter.parameter];
                    if (value) {
                        formData_1.append(parameter.name, value, value.name);
                    }
                });
                return formData_1;
            }
            var body_1 = args[appendQuery ? queryOrBodyIndex + 1 : queryOrBodyIndex];
            return createQuery(body_1).substr(1);
        }
        return sendBody ? JSON.stringify(args[appendQuery ? queryOrBodyIndex + 1 : queryOrBodyIndex]) : undefined;
    };
    var urlParams = filterFormData(args, parameters);
    var createUrlResult = buildUrl(tmpl, urlParams, appendQuery);
    var url = createUrlResult[0];
    var queryOrBodyIndex = createUrlResult[1];
    var headers = prepareHeaders(instance);
    var body = createBody();
    var chain = chainFactory(instance.__Pretend__.interceptors);
    return chain({
        url: url,
        options: {
            method: method,
            headers: headers,
            body: body
        }
    });
}
/**
 * @internal
 */
function methodDecoratorFactory(method, url, sendBody, appendQuery) {
    return function (_target, property, descriptor) {
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return execute(this, method, "" + this.__Pretend__.baseUrl + url, args, sendBody, appendQuery, (this.__Pretend__.parameters || {})[property]);
        };
        return descriptor;
    };
}
exports.methodDecoratorFactory = methodDecoratorFactory;
/**
 * @internal
 */
function headerDecoratorFactory(headers) {
    return function (_target, _propertyKey, descriptor) {
        var originalFunction = descriptor.value;
        descriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return Promise.resolve()
                .then(function () {
                _this.__Pretend__.perRequest = {
                    headers: (Array.isArray(headers) ? headers : [headers]).reduce(function (akku, header) {
                        var match = header.match(/([^:]+): *(.*)/);
                        if (!match) {
                            throw new Error("Invalid header format for '" + header + "'");
                        }
                        var name = match[1], value = match[2];
                        if (!akku[name]) {
                            akku[name] = [];
                        }
                        akku[name].push(value);
                        return akku;
                    }, {})
                };
                return originalFunction.apply(_this, args)
                    .then(function (result) {
                    _this.__Pretend__.perRequest = undefined;
                    return result;
                })
                    .catch(function (error) {
                    _this.__Pretend__.perRequest = undefined;
                    throw error;
                });
            });
        };
        return descriptor;
    };
}
exports.headerDecoratorFactory = headerDecoratorFactory;
var Pretend = /** @class */ (function () {
    function Pretend() {
        this.interceptors = [];
        this.decoder = Pretend.JsonDecoder;
    }
    Pretend.builder = function () {
        return new Pretend();
    };
    Pretend.prototype.interceptor = function (interceptor) {
        this.interceptors.push(interceptor);
        return this;
    };
    Pretend.prototype.requestInterceptor = function (requestInterceptor) {
        this.interceptors.push(function (chain, request) {
            return chain(requestInterceptor(request));
        });
        return this;
    };
    Pretend.prototype.basicAuthentication = function (username, password) {
        var usernameAndPassword = username + ":" + password;
        var auth = 'Basic '
            + (typeof global.btoa !== 'undefined'
                ? global.btoa(usernameAndPassword)
                : Buffer.from(usernameAndPassword, 'binary').toString('base64'));
        this.requestInterceptor(function (request) {
            request.options.headers.set('Authorization', auth);
            return request;
        });
        return this;
    };
    Pretend.prototype.decode = function (decoder) {
        this.decoder = decoder;
        return this;
    };
    Pretend.prototype.target = function (descriptor, baseUrl) {
        var _this = this;
        if (this.decoder) {
            // if we have a decoder, the first thing to do with a response is to decode it
            this.interceptors.push(function (chain, request) {
                return chain(request).then(function (response) { return _this.decoder(response); });
            });
        }
        // this is the end of the request chain
        this.interceptors.push(Pretend.FetchInterceptor);
        var instance = new descriptor();
        instance.__Pretend__ = {
            baseUrl: baseUrl.endsWith('/') ? baseUrl.substring(0, baseUrl.length - 1) : baseUrl,
            interceptors: this.interceptors,
            parameters: descriptor.prototype.__pretend_parameter__
        };
        return instance;
    };
    Pretend.FetchInterceptor = 
    // tslint:disable-next-line
    function (_chain, request) { return fetch(request.url, request.options); };
    Pretend.JsonDecoder = function (response) { return response.json(); };
    Pretend.TextDecoder = function (response) { return response.text(); };
    return Pretend;
}());
exports.Pretend = Pretend;
//# sourceMappingURL=index.js.map