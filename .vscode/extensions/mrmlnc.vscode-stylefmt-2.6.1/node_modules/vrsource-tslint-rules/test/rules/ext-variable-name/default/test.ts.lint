/**
Lint test where everything should be in camel case
*/

var moduleCamel  = "camel";
var ModulePascal = "pascal";
    ~~~~~~~~~~~~    [Variable must be in camel case]
const MODULE_CONST  = "const"
const another_const = "const"
      ~~~~~~~~~~~~~ [Variable must be in uppercase]
var _noLeading = "";
    ~~~~~~~~~~  [Variable name must not have leading underscore]
var trailing_ = "";
    ~~~~~~~~~   [Variable name must not have trailing underscore]
var number = 42;
    ~~~~~~      [Variable name clashes with keyword/type]

class BadParamPropClass {
    constructor(public badPublic_, protected BadPascal, private bad_snake) {}
                       ~~~~~~~~~~                                          [Property name must not have trailing underscore]
                       ~~~~~~~~~~                                          [Property must be in snake case]
                                             ~~~~~~~~~                     [Property must be in camel case]
                                                                ~~~~~~~~~  [Property must be in camel case]
}

class GoodParamPropClass {
    constructor(public good_public, protected goodProtected_, private _goodPrivate) {}
}

function varScope() {
    let localCamel = 10;
        ~~~~~~~~~~  [Variable must be in snake case]
        ~~~~~~~~~~  [Variable name must have leading underscore]
    let local_snake = 20;
        ~~~~~~~~~~~ [Variable name must have leading underscore]
    let _good_local = 42;
    let _number = 42; //allowed because of leading underscore

    function local_func() {}
    function localFunc() {}
             ~~~~~~~~~  [Function must be in snake case]
}

function snake_func() {}
         ~~~~~~~~~~  [Function must be in camel case]

class camelClass {}
      ~~~~~~~~~~ [Class must be in pascal case]
class UPPER_CLASS {}
      ~~~~~~~~~~~ [Class must be in pascal case]

function innerScope() {
    class goodCamel {}
    class BadPascal {}
          ~~~~~~~~~ [Class must be in camel case]
}

interface PascalIface {}
          ~~~~~~~~~~~ [Interface name did not match required regex]
interface IPascalIface {}

class TestClass {
    private privCamel = 10;
    private _leadPriv = 10;
    private trailPriv_ = 10;
            ~~~~~~~~~~  [Property name must not have trailing underscore]
    private snake_priv = 10;
            ~~~~~~~~~~  [Property must be in camel case]

    protected protCamel = 10;
    protected _leadProt = 10;
              ~~~~~~~~~  [Property name must not have leading underscore]
    protected trailProt_ = 10;
    protected snake_prot = 10;
              ~~~~~~~~~~ [Property must be in camel case]

    public snake_pub = 10;
    public camelPub = 10;
           ~~~~~~~~  [Property must be in snake case]
    other_pub = 20;

    public get camelPubAcc() {}
               ~~~~~~~~~~~  [Property must be in snake case]
    public set camelPubAcc(var_) {}
               ~~~~~~~~~~~  [Property must be in snake case]
    private get snake_priv_acc() {}
                ~~~~~~~~~~~~~~  [Property must be in camel case]
    private set snake_priv_acc(var_) {}
                ~~~~~~~~~~~~~~  [Property must be in camel case]
    protected get snake_prot_acc() {}
                  ~~~~~~~~~~~~~~ [Property must be in camel case]
    protected set snake_prot_acc(var_) {}
                  ~~~~~~~~~~~~~~ [Property must be in camel case]
}

class AnotherClass {
    public doSomething() {}
    doSomethingElse() {}

    protected snake_method_() {}
    protected camelProt() {}
              ~~~~~~~~~  [Method must be in snake case]

    private _PascalPriv() {}
    private snake_priv_() {}
            ~~~~~~~~~~~  [Method must be in pascal case]
            ~~~~~~~~~~~  [Method name must not have trailing underscore]
}

class StaticClass {
    static const UPPER_CONST = 10;
    static const PascalConst = 20;
                 ~~~~~~~~~~~  [Property must be in uppercase]

    static StaticConst = 20;
    static snake_const = 10;
           ~~~~~~~~~~~   [Property must be in pascal case]
}

class BaseClass {
    constructor() {
       const _lower_const = 10;
       const _short = "string";
       let localCamel = 10;
           ~~~~~~~~~~  [Variable must be in snake case]
           ~~~~~~~~~~  [Variable name must have leading underscore]
    }

    doSomething(): void {
       let _lower_const = 10;
       let _short = "string";
       let localCamel = 10;
           ~~~~~~~~~~  [Variable must be in snake case]
           ~~~~~~~~~~  [Variable name must have leading underscore]
    }
}

function testParams(noTrail, bad_param, _badLead, badTrail_) {}
                    ~~~~~~~                                    [Parameter name must have trailing underscore]
                             ~~~~~~~~~                         [Parameter must be in camel case]
                             ~~~~~~~~~                         [Parameter name must have trailing underscore]
                                        ~~~~~~~~               [Parameter name must not have leading underscore]
                                        ~~~~~~~~               [Parameter name must have trailing underscore]
let { foo, bar } = { foo: 1, bar: 2 };
let [ InvalidFoo, invalid_bar, ...invalid_baz ] =  [1, 2, 3, 4];
      ~~~~~~~~~~                              [Variable must be in camel case]
                  ~~~~~~~~~~~                 [Variable must be in camel case]
                                  ~~~~~~~~~~~ [Variable must be in camel case]
