"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const engine_1 = require("./engine");
const parser_1 = require("./parser");
/**
 * Primary API for using HTML-validate.
 *
 * Provides high-level abstractions for common operations.
 */
class HtmlValidate {
    /**
     * Create a new validator.
     *
     * @param config - If set it provides the global default configuration. By
     * default `Config.defaultConfig()` is used.
     */
    constructor(config) {
        const defaults = config_1.Config.empty();
        this.globalConfig = defaults.merge(config ? config_1.Config.fromObject(config) : config_1.Config.defaultConfig());
        this.configLoader = new config_1.ConfigLoader(config_1.Config);
    }
    /**
     * Parse and validate HTML from string.
     *
     * @param str - Text to parse.
     * @param hooks - Optional hooks (see [[Source]]) for definition.
     * @returns Report output.
     */
    validateString(str, hooks) {
        const source = {
            column: 1,
            data: str,
            filename: "inline",
            line: 1,
            hooks,
        };
        return this.validateSource(source);
    }
    /**
     * Parse and validate HTML from [[Source]].
     *
     * @param source - Source to parse.
     * @returns Report output.
     */
    validateSource(source) {
        const config = this.getConfigFor("inline");
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.lint([source]);
    }
    /**
     * Parse and validate HTML from file.
     *
     * @param filename - Filename to read and parse.
     * @returns Report output.
     */
    validateFile(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.lint(source);
    }
    /**
     * Tokenize filename and output all tokens.
     *
     * Using CLI this is enabled with `--dump-tokens`. Mostly useful for
     * debugging.
     *
     * @param filename - Filename to tokenize.
     */
    dumpTokens(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpTokens(source);
    }
    /**
     * Parse filename and output all events.
     *
     * Using CLI this is enabled with `--dump-events`. Mostly useful for
     * debugging.
     *
     * @param filename - Filename to dump events from.
     */
    dumpEvents(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpEvents(source);
    }
    /**
     * Parse filename and output DOM tree.
     *
     * Using CLI this is enabled with `--dump-tree`. Mostly useful for
     * debugging.
     *
     * @param filename - Filename to dump DOM tree from.
     */
    dumpTree(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpTree(source);
    }
    /**
     * Get contextual documentation for the given rule.
     *
     * Typical usage:
     *
     * ```js
     * const report = htmlvalidate.validateFile("my-file.html");
     * for (const result of report.results){
     *   const config = htmlvalidate.getConfigFor(result.filePath);
     *   for (const message of result.messages){
     *     const documentation = htmlvalidate.getRuleDocumentation(message.ruleId, config, message.context);
     *     // do something with documentation
     *   }
     * }
     * ```
     *
     * @param ruleId - Rule to get documentation for.
     * @param config - If set it provides more accurate description by using the
     * correct configuration for the file.
     * @param context - If set to `Message.context` some rules can provide
     * contextual details and suggestions.
     */
    getRuleDocumentation(ruleId, config, context) {
        const engine = new engine_1.Engine(config || this.getConfigFor("inline"), parser_1.Parser);
        return engine.getRuleDocumentation(ruleId, context);
    }
    /**
     * Create a parser configured for given filename.
     *
     * @param source - Source to use.
     */
    getParserFor(source) {
        const config = this.getConfigFor(source.filename);
        return new parser_1.Parser(config);
    }
    /**
     * Get configuration for given filename.
     *
     * @param filename - Filename to get configuration for.
     */
    getConfigFor(filename) {
        const config = this.configLoader.fromTarget(filename);
        const merged = this.globalConfig.merge(config);
        merged.init();
        return merged;
    }
    /**
     * Flush configuration cache. Clears full cache unless a filename is given.
     *
     * @param filename - If set, only flush cache for given filename.
     */
    flushConfigCache(filename) {
        this.configLoader.flush(filename);
    }
}
exports.default = HtmlValidate;
