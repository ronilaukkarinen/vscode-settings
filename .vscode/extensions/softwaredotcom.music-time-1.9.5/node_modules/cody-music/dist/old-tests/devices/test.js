"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../lib/util");
const expect = require("chai").expect;
const CodyMusic = __importStar(require("../../index"));
const controller_1 = require("../../lib/controller");
const models_1 = require("../../lib/models");
const util_2 = require("../util");
const musicUtil = new util_1.MusicUtil();
const musicCtr = controller_1.MusicController.getInstance();
const testUtil = new util_2.TestUtil();
/**
 * Don't add "async" into the it condition.
 * i.e. xit("description text", async (done) => {
 *     // do stuff
 * });
 * It will return the following error if you do.
 * "Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both."
 */
describe("spotify devices tests", () => {
    before(done => {
        let configFile = __dirname + "/../config.json";
        let data = testUtil.getJsonFromFile(configFile);
        CodyMusic.setCredentials({
            refreshToken: data.refreshToken,
            clientSecret: data.clientSecret,
            clientId: data.clientId,
            accessToken: data.accessToken
        });
        musicCtr.quitApp(models_1.PlayerName.SpotifyDesktop).then(() => {
            musicCtr.quitApp(models_1.PlayerName.ItunesDesktop).then(() => {
                CodyMusic.getSpotifyDevices().then(async (response) => {
                    if (response && response.length > 0) {
                        // get the 1st device id
                        const device_id = response[0].id;
                        const options = {
                            device_id
                        };
                        response = await CodyMusic.pause(CodyMusic.PlayerName.SpotifyWeb, options);
                        done();
                    }
                    else {
                        done();
                    }
                });
            });
        });
    });
    after("clean up device testing", done => {
        musicCtr.quitApp(models_1.PlayerName.SpotifyDesktop).then(() => {
            musicCtr.quitApp(models_1.PlayerName.ItunesDesktop).then(() => {
                CodyMusic.getSpotifyDevices().then(async (response) => {
                    if (response && response.length > 0) {
                        // get the 1st device id
                        const device_id = response[0].id;
                        const options = {
                            device_id
                        };
                        response = await CodyMusic.pause(CodyMusic.PlayerName.SpotifyWeb, options);
                        done();
                    }
                    else {
                        done();
                    }
                });
            });
        });
    });
    it("get available devices test", async () => {
        let devices = await CodyMusic.getSpotifyDevices();
        await CodyMusic.launchPlayer(CodyMusic.PlayerName.SpotifyDesktop, {
            queitly: false
        });
        devices = await CodyMusic.getSpotifyDevices();
    });
});
